/*
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.
*/

class Solution {
public:
    void backtrack(vector<int>& candidates, int target, vector<vector<int>>& result, vector<int>& temp, int start) {
        if (target == 0) {
            result.push_back(temp);
            return;
        }
        
        for (int i = start; i < candidates.size(); i++) {
            if (i > start && candidates[i] == candidates[i - 1]) continue; // Skip duplicate elements
            if (candidates[i] > target) break; // Stop if current number exceeds target
            
            temp.push_back(candidates[i]);
            backtrack(candidates, target - candidates[i], result, temp, i + 1); // Move to next index
            temp.pop_back(); // Backtrack to try another possibility
        }
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> result;
        vector<int> temp;
        sort(candidates.begin(), candidates.end()); // Sort to handle duplicates
        backtrack(candidates, target, result, temp, 0);
        return result;
    }
};
