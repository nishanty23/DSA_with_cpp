/*
You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].

Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:

0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].
*/

class Solution {
public:
    int jump(vector<int>& nums) {
        int n = nums.size();
        if (n == 1) return 0;  // Already at the last index
        
        int jumps = 0, currEnd = 0, farthest = 0;
        
        for (int i = 0; i < n - 1; i++) {  // Traverse till the second-last index
            farthest = max(farthest, i + nums[i]); // Update the farthest reach
            
            if (i == currEnd) {  // Time to jump
                jumps++;
                currEnd = farthest;  // Move to the next reachable range
                
                if (currEnd >= n - 1) break; // If we can reach the last index, stop
            }
        }
        
        return jumps;
    }
};
