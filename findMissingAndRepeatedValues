/*
You are given a 0-indexed 2D integer matrix grid of size n * n with values in the range [1, n2]. Each integer appears exactly once except a which appears twice and b which is missing. The task is to find the repeating and missing numbers a and b.

Return a 0-indexed integer array ans of size 2 where ans[0] equals to a and ans[1] equals to b.
*/

#include <vector>
using namespace std;

class Solution {
public:
    vector<int> findMissingAndRepeatedValues(vector<vector<int>>& grid) {  // Fixed function name
        int n = grid.size();
        long long N = n * n;  // Total numbers from 1 to N

        // Expected sum and sum of squares
        long long expectedSum = (N * (N + 1)) / 2;
        long long expectedSumSq = (N * (N + 1) * (2 * N + 1)) / 6;

        // Actual sum and sum of squares
        long long actualSum = 0, actualSumSq = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                long long num = grid[i][j];
                actualSum += num;
                actualSumSq += (num * num);
            }
        }

        // Solve for a and b
        long long diffSum = actualSum - expectedSum;  // (a - b)
        long long diffSumSq = actualSumSq - expectedSumSq;  // (a^2 - b^2)

        // (a + b) = diffSumSq / diffSum
        long long sum_ab = diffSumSq / diffSum;

        // a = (diffSum + sum_ab) / 2
        long long a = (diffSum + sum_ab) / 2;
        long long b = a - diffSum;

        return { (int)a, (int)b };
    }
};
