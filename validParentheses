/*
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
*/

#include <iostream>
#include <stack>
#include <unordered_map>

using namespace std;

class Solution {
public:
    bool isValid(string s) {
        stack<char> st;
        unordered_map<char, char> bracketMap = {{')', '('}, {'}', '{'}, {']', '['}};
        
        for (char c : s) {
            if (bracketMap.count(c)) {  // If it's a closing bracket
                if (st.empty() || st.top() != bracketMap[c])
                    return false;
                st.pop();
            } else {
                st.push(c);  // Push opening bracket
            }
        }
        return st.empty();  // Stack should be empty if valid
    }
};
