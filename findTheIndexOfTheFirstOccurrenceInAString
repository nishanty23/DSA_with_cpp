/*
Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.
*/

#include <iostream>
#include <vector>

using namespace std;

class Solution {
public:
    int strStr(string haystack, string needle) {
        int n = haystack.size(), m = needle.size();
        if (m == 0) return 0; // Edge case: empty needle

        // Step 1: Build LPS array
        vector<int> lps(m, 0);
        int j = 0;  // Length of previous longest prefix suffix
        for (int i = 1; i < m; i++) {
            while (j > 0 && needle[i] != needle[j])
                j = lps[j - 1];
            if (needle[i] == needle[j])
                lps[i] = ++j;
        }

        // Step 2: Search using LPS
        j = 0; // Pointer for needle
        for (int i = 0; i < n; i++) {
            while (j > 0 && haystack[i] != needle[j])
                j = lps[j - 1];

            if (haystack[i] == needle[j]) 
                j++;

            if (j == m) 
                return i - m + 1; // Found occurrence
        }
        
        return -1; // Not found
    }
};
