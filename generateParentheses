/*
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
*/

#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Solution {
public:
    void backtrack(int open, int close, int n, string current, vector<string>& result) {
        // Base case: When the current string reaches 2*n, store the result
        if (current.length() == 2 * n) {
            result.push_back(current);
            return;
        }

        // If open brackets count is less than n, add '('
        if (open < n) {
            backtrack(open + 1, close, n, current + "(", result);
        }

        // If close brackets count is less than open, add ')'
        if (close < open) {
            backtrack(open, close + 1, n, current + ")", result);
        }
    }

    vector<string> generateParenthesis(int n) {
        vector<string> result;
        backtrack(0, 0, n, "", result);
        return result;
    }
};

int main() {
    Solution sol;
    int n = 3;
    vector<string> result = sol.generateParenthesis(n);
    
    for (const string& s : result) {
        cout << s << endl;
    }
    
    return 0;
}
