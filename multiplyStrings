/*
Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.
*/

class Solution {
public:
    string multiply(string num1, string num2) {
        if (num1 == "0" || num2 == "0") return "0";  // Edge case

        int m = num1.size(), n = num2.size();
        vector<int> result(m + n, 0); // Result array of max possible size

        // Step 1: Perform digit-wise multiplication
        for (int i = m - 1; i >= 0; i--) {
            for (int j = n - 1; j >= 0; j--) {
                int mul = (num1[i] - '0') * (num2[j] - '0');  // Convert chars to digits
                int sum = mul + result[i + j + 1];  // Add to previous value

                result[i + j + 1] = sum % 10;  // Store unit place
                result[i + j] += sum / 10;    // Carry to next position
            }
        }

        // Step 2: Convert result array to string
        string ans = "";
        for (int num : result) {
            if (!(ans.empty() && num == 0)) { // Skip leading zeros
                ans.push_back(num + '0');
            }
        }

        return ans.empty() ? "0" : ans; // Handle case where all were zeros
    }
};
